{"ast":null,"code":"var _jsxFileName = \"/Users/alexgilbert/Desktop/spacex-update/client/pages/launches.js\";\nvar __jsx = React.createElement;\nimport React, { Fragment } from 'react';\nimport { useQuery, gql } from '@apollo/client';\nimport { Grid, GridItem, Text } from '../componets/layout/layout.styles';\nconst LAUNCHES_QUERY = gql`\n  query LaunchesQuery {\n    launches {\n      flight_number\n      mission_name\n      launch_date_local\n      launch_success\n    }\n  }\n`;\n\nconst Launches = () => {\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(LAUNCHES_QUERY);\n  if (loading) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  if (error) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 21\n    }\n  }, \"Error :(\");\n  return __jsx(Grid, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }\n  }, data.launches.map(({\n    flight_number,\n    mission_name\n  }) => __jsx(GridItem, {\n    key: flight_number,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }\n  }, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 11\n    }\n  }, flight_number, \" : \", mission_name))));\n};\n\nexport default Launches;","map":{"version":3,"sources":["/Users/alexgilbert/Desktop/spacex-update/client/pages/launches.js"],"names":["React","Fragment","useQuery","gql","Grid","GridItem","Text","LAUNCHES_QUERY","Launches","loading","error","data","launches","map","flight_number","mission_name"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,QAAT,EAAmBC,GAAnB,QAA8B,gBAA9B;AAEA,SAASC,IAAT,EAAeC,QAAf,EAAyBC,IAAzB,QAAqC,mCAArC;AAEA,MAAMC,cAAc,GAAGJ,GAAI;;;;;;;;;CAA3B;;AAWA,MAAMK,QAAQ,GAAG,MAAM;AACrB,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BT,QAAQ,CAACK,cAAD,CAAzC;AAEA,MAAIE,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AACb,MAAIC,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAP;AAEX,SACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGC,IAAI,CAACC,QAAL,CAAcC,GAAd,CAAkB,CAAC;AAAEC,IAAAA,aAAF;AAAiBC,IAAAA;AAAjB,GAAD,KACjB,MAAC,QAAD;AAAU,IAAA,GAAG,EAAED,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,aADH,SACqBC,YADrB,CADF,CADD,CADH,CADF;AAWD,CAjBD;;AAmBA,eAAeP,QAAf","sourcesContent":["import React, { Fragment } from 'react';\nimport { useQuery, gql } from '@apollo/client';\n\nimport { Grid, GridItem, Text } from '../componets/layout/layout.styles';\n\nconst LAUNCHES_QUERY = gql`\n  query LaunchesQuery {\n    launches {\n      flight_number\n      mission_name\n      launch_date_local\n      launch_success\n    }\n  }\n`;\n\nconst Launches = () => {\n  const { loading, error, data } = useQuery(LAUNCHES_QUERY);\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error :(</p>;\n\n  return (\n    <Grid>\n      {data.launches.map(({ flight_number, mission_name }) => (\n        <GridItem key={flight_number}>\n          <Text>\n            {flight_number} : {mission_name}\n          </Text>\n        </GridItem>\n      ))}\n    </Grid>\n  );\n};\n\nexport default Launches;\n"]},"metadata":{},"sourceType":"module"}