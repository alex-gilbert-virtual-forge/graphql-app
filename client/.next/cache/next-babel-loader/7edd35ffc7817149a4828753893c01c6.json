{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/alexgilbert/Desktop/spacex-update/client/pages/rockets.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query RocketsQuery {\\n    rockets {\\n      rocket_id\\n      rocket_name\\n      rocket_type\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Fragment } from 'react';\nimport { useQuery, gql } from '@apollo/client';\nimport { Grid, GridItem, Title, Text } from '../componets/layout/layout.styles';\nvar ROCKETS_QUERY = gql(_templateObject());\n\nvar Rockets = function Rockets() {\n  _s();\n\n  var _useQuery = useQuery(ROCKETS_QUERY),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data;\n\n  if (loading) return __jsx(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  if (error) return __jsx(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 21\n    }\n  }, \"Error :(\");\n  return __jsx(Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 5\n    }\n  }, __jsx(Title, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }\n  }, \"Rockets\"), __jsx(Grid, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }\n  }, data.rockets.map(function (_ref) {\n    var rocket_id = _ref.rocket_id,\n        rocket_name = _ref.rocket_name,\n        rocket_type = _ref.rocket_type;\n    return __jsx(GridItem, {\n      key: rocket_id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 11\n      }\n    }, __jsx(Text, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 13\n      }\n    }, rocket_name, \" : \", rocket_type));\n  })));\n};\n\n_s(Rockets, \"OQZiY3KqWoytFPIJWw/H9Hrmbok=\", false, function () {\n  return [useQuery];\n});\n\n_c = Rockets;\nexport default Rockets;\n\nvar _c;\n\n$RefreshReg$(_c, \"Rockets\");","map":{"version":3,"sources":["/Users/alexgilbert/Desktop/spacex-update/client/pages/rockets.js"],"names":["React","Fragment","useQuery","gql","Grid","GridItem","Title","Text","ROCKETS_QUERY","Rockets","loading","error","data","rockets","map","rocket_id","rocket_name","rocket_type"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,QAAT,EAAmBC,GAAnB,QAA8B,gBAA9B;AAEA,SAASC,IAAT,EAAeC,QAAf,EAAyBC,KAAzB,EAAgCC,IAAhC,QAA4C,mCAA5C;AAEA,IAAMC,aAAa,GAAGL,GAAH,mBAAnB;;AAUA,IAAMM,OAAO,GAAG,SAAVA,OAAU,GAAM;AAAA;;AAAA,kBACaP,QAAQ,CAACM,aAAD,CADrB;AAAA,MACZE,OADY,aACZA,OADY;AAAA,MACHC,KADG,aACHA,KADG;AAAA,MACIC,IADJ,aACIA,IADJ;;AAGpB,MAAIF,OAAJ,EAAa,OAAO,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AACb,MAAIC,KAAJ,EAAW,OAAO,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAP;AAEX,SACE,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,EAEE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGC,IAAI,CAACC,OAAL,CAAaC,GAAb,CAAiB;AAAA,QAAGC,SAAH,QAAGA,SAAH;AAAA,QAAcC,WAAd,QAAcA,WAAd;AAAA,QAA2BC,WAA3B,QAA2BA,WAA3B;AAAA,WAChB,MAAC,QAAD;AAAU,MAAA,GAAG,EAAEF,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGC,WADH,SACmBC,WADnB,CADF,CADgB;AAAA,GAAjB,CADH,CAFF,CADF;AAcD,CApBD;;GAAMR,O;UAC6BP,Q;;;KAD7BO,O;AAsBN,eAAeA,OAAf","sourcesContent":["import React, { Fragment } from 'react';\nimport { useQuery, gql } from '@apollo/client';\n\nimport { Grid, GridItem, Title, Text } from '../componets/layout/layout.styles';\n\nconst ROCKETS_QUERY = gql`\n  query RocketsQuery {\n    rockets {\n      rocket_id\n      rocket_name\n      rocket_type\n    }\n  }\n`;\n\nconst Rockets = () => {\n  const { loading, error, data } = useQuery(ROCKETS_QUERY);\n\n  if (loading) return <Text>Loading...</Text>;\n  if (error) return <Text>Error :(</Text>;\n\n  return (\n    <Fragment>\n      <Title>Rockets</Title>\n      <Grid>\n        {data.rockets.map(({ rocket_id, rocket_name, rocket_type }) => (\n          <GridItem key={rocket_id}>\n            <Text>\n              {rocket_name} : {rocket_type}\n            </Text>\n          </GridItem>\n        ))}\n      </Grid>\n    </Fragment>\n  );\n};\n\nexport default Rockets;\n"]},"metadata":{},"sourceType":"module"}